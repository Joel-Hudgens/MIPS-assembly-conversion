#let $s0 = a
#let $s1 = b
#let $s2 = result


Main:
   #a0 = a(x)
   #a1 = b(y)
   add $a0,$zero,$s0
   add $a1,$zero,$s1


   add $t1,$s0,$s1         #a+b
   sub $t2,$s0,$s1         #a-b
   sub $t3,$s1,$s0         #b-a


   add $a0,$zero,$t1
   jal Abs
   add $t4,$v0,$zero       #abs(a+b)


   add $a0,$zero,$t2
   jal Abs
   add $t5,$v0,$zero       #abs(a-b)


   add $a0,$zero,$t3
   jal Abs
   add $t6,$v0,$zero       #abs(b-a)




   add $a0,$zero,$t4
   add $a1,$zero,$t5
   jal Recursion
   add $t7,$v0,$zero       # recursion(abs(a+b), abs(a-b))


   add $a0,$zero,$t6
   add $a1,$zero,$t4
   jal Recursion
   add $t8,$v0,$zero       # recursion(abs(b-a), abs(b+a))


   mul $t7,$t7,$s0         # (recursion(abs(a+b), abs(a-b))) a


   mul $t8,$t8,$s1         # (recursion(abs(b-a), abs(b+a))) b


   sub $s2,$t7,$t8


   j Exit




Recursion:
 
  #If
  bgt $a0,$zero,elseIf1
  bgt $a1,$zero,elseIf1
  add $v0,$zero,$v0          #return 0
   jr $ra
 
  elseIf1:
  ble $a0,$zero,elseIf2
  bgt $a1,$zero,elseIf2
  add $v0,$zero,$a0          #return x
  jr $ra
 
  elseIf2:
  bgt $a0,$zero,Else
  ble $a1,$zero,Else
  add $v0,$zero,$a1          #return y


  jr $ra




 
  Else:
  #RECURSIVE CALLS
   addi $sp, $sp, -16         #Store arguments and ra to the stack
   sw $ra, 8($sp)             #
   sw $a1, 4($sp)             #
   sw $a0, 0($sp)             #
  
   addi $a0, $a0, -1           # x --
   jal Recursion               # recursion(x - 1, y)


   lw $a0, 0($sp)              #Restore argument registers
   lw $a1, 4($sp)              #
  


   #Add $v0 to top of stack
   #addi $sp, $sp, -4
   sw $v0, 12($sp)




   addi $a1, $a1, -1           # y --
   jal Recursion               # recursion(x, y - 1)
  
   #load v0 from stack
   lw $t0,12($sp)
   add $v0,$v0,$t0


   lw $ra,8($sp)               #restore ra
   addi $sp, $sp, 16          #return stack pointer to what it was originally
   
   jr $ra                      #jr back to main




Abs:
   bgt $a0,$zero,Return           #If a0 greater than 0, jump
   sub $a0,$zero,$a0              #Otherwise, do 0 - a0


   Return:
   add $v0,$zero,$a0


   jr $ra




Exit:
